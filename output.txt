diff --git a/pom.xml b/pom.xml
index 8015586..7143a6f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -62,6 +62,12 @@
             <artifactId>h2</artifactId>
             <scope>runtime</scope>
         </dependency>
+        <dependency>
+            <groupId>com.theokanning.openai-gpt3-java</groupId>
+            <artifactId>client</artifactId>
+            <version>0.18.2</version> <!-- or latest -->
+        </dependency>
+
         <dependency>
             <groupId>org.projectlombok</groupId>
             <artifactId>lombok</artifactId>
diff --git a/src/main/java/com/erik/git_bro/ai/ChatGptAnalyzer.java b/src/main/java/com/erik/git_bro/ai/ChatGptAnalyzer.java
index c52c898..8a1e875 100644
--- a/src/main/java/com/erik/git_bro/ai/ChatGptAnalyzer.java
+++ b/src/main/java/com/erik/git_bro/ai/ChatGptAnalyzer.java
@@ -1,8 +1,12 @@
 package com.erik.git_bro.ai;
 
+import java.util.List;
+
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Component;
 
 import com.erik.git_bro.client.ChatGPTClient;
+import com.erik.git_bro.model.ErrorResponse;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -17,17 +21,32 @@ public class ChatGptAnalyzer implements CodeAnalyzer {
     }
 
     @Override
-    public String analyzeCode(String input) throws Exception {
-        return client.analyzeCode(input);
+    public String analyzeCode(List<String> chunkedInput) throws Exception {
+        return client.analyzeCode(chunkedInput);
     }
 
     @Override
-    public String parseAiResponse(String rawResponse) {
+    public String parseAiResponse(String aiJsonResponse) throws Exception {
+        ObjectMapper mapper = new ObjectMapper();
+
         try {
-            JsonNode node = objectMapper.readTree(rawResponse);
-            return node.get("choices").get(0).get("message").get("content").asText();
+            JsonNode root = mapper.readTree(aiJsonResponse);
+            JsonNode content = root
+                    .path("choices")
+                    .get(0)
+                    .path("message")
+                    .path("content");
+
+            if (content.isMissingNode() || content.isNull()) {
+                throw new Exception(
+                        "The AI response did not contain a 'message.content' field. Please ensure the response is properly formatted.");
+            }
+
+            return content.asText();
+
         } catch (Exception e) {
-            return "Failed to parse ChatGPT response.";
+            throw new Exception("Failed to parse AI response: " + e.getMessage());
         }
     }
+
 }
diff --git a/src/main/java/com/erik/git_bro/ai/CodeAnalyzer.java b/src/main/java/com/erik/git_bro/ai/CodeAnalyzer.java
index 2f90522..d9bbcdc 100644
--- a/src/main/java/com/erik/git_bro/ai/CodeAnalyzer.java
+++ b/src/main/java/com/erik/git_bro/ai/CodeAnalyzer.java
@@ -1,11 +1,12 @@
 package com.erik.git_bro.ai;
 
 import java.io.IOException;
+import java.util.List;
 
 import org.springframework.context.annotation.Primary;
 @Primary
 public interface CodeAnalyzer {
     static final String NO_ISSUES = "No issues detected.";
-    String analyzeCode(String input) throws IOException, Exception;
-    String parseAiResponse(String rawResponse);
+    String analyzeCode(List<String> chunkedInput) throws IOException, Exception;
+    String parseAiResponse(String rawResponse) throws Exception;
 }
\ No newline at end of file
diff --git a/src/main/java/com/erik/git_bro/ai/CodeBertAnalyzer.java b/src/main/java/com/erik/git_bro/ai/CodeBertAnalyzer.java
index cb0af0b..4fb7aa8 100644
--- a/src/main/java/com/erik/git_bro/ai/CodeBertAnalyzer.java
+++ b/src/main/java/com/erik/git_bro/ai/CodeBertAnalyzer.java
@@ -19,8 +19,8 @@ public class CodeBertAnalyzer implements CodeAnalyzer {
     }
 
     @Override
-    public String analyzeCode(String input) throws Exception {
-        return client.analyzeCode(input);
+    public String analyzeCode(List<String> chunkedInput) throws Exception {
+        return client.analyzeCode(chunkedInput);
     }
 
     @Override
diff --git a/src/main/java/com/erik/git_bro/client/ChatGPTClient.java b/src/main/java/com/erik/git_bro/client/ChatGPTClient.java
index 86f8a9d..8ef338e 100644
--- a/src/main/java/com/erik/git_bro/client/ChatGPTClient.java
+++ b/src/main/java/com/erik/git_bro/client/ChatGPTClient.java
@@ -1,13 +1,19 @@
 package com.erik.git_bro.client;
 
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Component;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.theokanning.openai.completion.chat.ChatMessage;
 
+import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
@@ -17,6 +23,7 @@ import okhttp3.Response;
 
 @Slf4j
 @Component
+@RequiredArgsConstructor
 public class ChatGPTClient {
 
     @Value("${openai.api.key}")
@@ -26,29 +33,29 @@ public class ChatGPTClient {
     private final ObjectMapper objectMapper = new ObjectMapper();
     private static final String API_URL = "https://api.openai.com/v1/chat/completions";
 
-    public String analyzeCode(String diffChunk) throws Exception {
+    public String analyzeCode(List<String> chunks) throws Exception {
+        List<ChatMessage> messages = new ArrayList<>();
 
-        final var extractedChunk =  this.extractInput(diffChunk);
+        log.info("The chunks: {}", chunks);
+        // Add the system message
+        messages.add(new ChatMessage("system", "You are a senior software engineer reviewing code diffs."));
 
-        log.info("Big CHUNK!!!");
-        String payloadTemplate = """
-                    {
-                    "model": "gpt-4o",
-                    "messages": [
-                          {"role": "system", "content": "You are a senior software engineer reviewing code diffs."},
-                          {"role": "user", "content": "Please review the following diff and give concise feedback: %s"}
-                    ],
-                    "temperature": 0.2
-                    }
-                """;
+        // Add each diff chunk as a separate user message
+        for (String chunk : chunks) {
+            messages.add(new ChatMessage("user", "Please review this diff:\n" + chunk));
+        }
+
+        // Build the request body map
+        Map<String, Object> payloadMap = new HashMap<>();
+        payloadMap.put("model", "gpt-4o");
+        payloadMap.put("temperature", 0.2);
+        payloadMap.put("messages", messages);
 
-        final String escapedChunk = objectMapper.writeValueAsString(extractedChunk).replaceAll("^\"|\"$", ""); // escape
-                                                                                                          // safely
-        
-        log.info("ESCAPED!!, {}", escapedChunk);
-        final String payload = String.format(payloadTemplate, escapedChunk);
+        // Serialize to JSON
+        String payloadJson = objectMapper.writeValueAsString(payloadMap);
 
-        RequestBody body = RequestBody.create(payload, MediaType.get("application/json"));
+        log.info("The payload: {}", payloadMap);
+        RequestBody body = RequestBody.create(payloadJson, MediaType.get("application/json"));
 
         Request request = new Request.Builder()
                 .url(API_URL)
@@ -64,10 +71,4 @@ public class ChatGPTClient {
         }
     }
 
-    public String extractInput(String jsonString) throws Exception {
-        ObjectMapper objectMapper = new ObjectMapper();
-        JsonNode rootNode = objectMapper.readTree(jsonString);
-        return rootNode.get("input").asText();
-    }
-
 }
diff --git a/src/main/java/com/erik/git_bro/client/CodeBertClient.java b/src/main/java/com/erik/git_bro/client/CodeBertClient.java
index ea14c5e..79f95bb 100644
--- a/src/main/java/com/erik/git_bro/client/CodeBertClient.java
+++ b/src/main/java/com/erik/git_bro/client/CodeBertClient.java
@@ -1,6 +1,7 @@
 package com.erik.git_bro.client;
 
 import java.io.IOException;
+import java.util.List;
 import java.util.Map;
 
 import org.springframework.beans.factory.annotation.Value;
@@ -22,14 +23,14 @@ public class CodeBertClient  {
     @Value("${huggingface.api.token}")
     private String huggingfaceToken;
     private final OkHttpClient client = new OkHttpClient();
-
+    private final ObjectMapper objectMapper = new ObjectMapper();
 
     private static final String API_URL = "https://api-inference.huggingface.co/models/microsoft/codebert-base";
  
 
 
-    public String analyzeCode(String codeSnippet) throws IOException {
-        Map<String, String> payloadMap = Map.of("inputs", codeSnippet);
+    public String analyzeCode(List<String> codeSnippet) throws IOException {
+        Map<String, String> payloadMap = Map.of("inputs", objectMapper.writeValueAsString(codeSnippet));
         String jsonPayload = new ObjectMapper().writeValueAsString(payloadMap);
         final var body = RequestBody.create(
                 jsonPayload,
diff --git a/src/main/java/com/erik/git_bro/controller/CodeReviewController.java b/src/main/java/com/erik/git_bro/controller/CodeReviewController.java
index d76a7ac..31fa50f 100644
--- a/src/main/java/com/erik/git_bro/controller/CodeReviewController.java
+++ b/src/main/java/com/erik/git_bro/controller/CodeReviewController.java
@@ -34,17 +34,17 @@ public class CodeReviewController {
                 .exceptionally(throwable -> {
                     Throwable cause = throwable.getCause() != null ? throwable.getCause() : throwable;
                     // Replace with SLF4J logging in production
-                    log.info("Eror!");
+                    log.info("Error!");
                     final var error = ErrorResponse.builder()
                             .message(cause.getMessage())
-                            .details(cause.getStackTrace().toString())
+                            .details(cause.getCause().getLocalizedMessage())
                             .build();
                     if (cause instanceof IllegalArgumentException) {
 
                         return ResponseEntity.badRequest().body(error);
                     }
-                    log.info(cause.getMessage());
-                    return ResponseEntity.status(500).body(null);
+                    log.error("Something went wrong: ", cause);
+                    return ResponseEntity.status(500).body(error);
                 });
     }
 }
diff --git a/src/main/java/com/erik/git_bro/service/CodeAnalysisService.java b/src/main/java/com/erik/git_bro/service/CodeAnalysisService.java
index e7c8619..0732035 100644
--- a/src/main/java/com/erik/git_bro/service/CodeAnalysisService.java
+++ b/src/main/java/com/erik/git_bro/service/CodeAnalysisService.java
@@ -5,14 +5,9 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 import java.time.Instant;
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
@@ -20,10 +15,8 @@ import org.springframework.scheduling.annotation.Async;
 import org.springframework.stereotype.Service;
 
 import com.erik.git_bro.ai.CodeAnalyzer;
-import com.erik.git_bro.config.AiProviderProperties;
 import com.erik.git_bro.model.Review;
 import com.erik.git_bro.repository.ReviewRepository;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import lombok.extern.slf4j.Slf4j;
@@ -33,67 +26,47 @@ import lombok.extern.slf4j.Slf4j;
 @Slf4j
 public class CodeAnalysisService {
 
-    private final AiProviderProperties aiProviderProperties;
+    private final ParsingService parsingService;
     @Value("${app.feedback.file-path}")
     private String feedbackFilePath;
     private final ReviewRepository reviewRepository;
     private final CodeAnalyzer analyzer;
     private final ObjectMapper objectMapper = new ObjectMapper();
-    private static final int CHUNK_SIZE = 00;
-    private static final int freeTierAPILimit = 20;
 
     public CodeAnalysisService(@Qualifier("codeAnalyzer") CodeAnalyzer analyzer,
-            AiProviderProperties aiProviderProperties,
-            ReviewRepository reviewRepository) {
+            ReviewRepository reviewRepository,
+            final ParsingService parsingService) {
         this.analyzer = analyzer;
         this.reviewRepository = reviewRepository;
-        this.aiProviderProperties = aiProviderProperties;
+        this.parsingService = parsingService;
     }
 
     @Async("virtualThreadExecutor")
     public CompletableFuture<Object> analyzeDiff(final String pullRequestId,
             final String rawDiffContent) {
         try {
-            // First, peel away everything excpet what was added. 
-            final var diffContent = this.extractAddedLinesOnly(rawDiffContent);
-            if (pullRequestId == null || diffContent == null) {
+            final var parseJSON = this.parsingService.extractInput(rawDiffContent);
+            final var filePath = this.parsingService.extractFilePathFromDiff(rawDiffContent);
+
+            log.info("raw content: {}", rawDiffContent);
+            if (pullRequestId == null || rawDiffContent == null) {
                 throw new IllegalArgumentException("Input parameters cannot be null");
             }
-
-            List<String> chunks = this.chunkItUp(diffContent);
-
-            log.info("Split diffContent for PR {} into {} chunks", pullRequestId, chunks.size());
-
-            List<String> feedbacks = chunks.stream()
-                    .map(chunk -> {
-
-                        try {
-                            final String feedback = analyzer.analyzeCode(chunk);
-                            return analyzer.parseAiResponse(feedback);
-                        } catch (final IOException e) {
-                            log.error("Failed to process chunk for PR {}: {}.", pullRequestId, e.getMessage());
-                            return "Error analyzing chunk";
-                        } catch (Exception e) {
-
-                            log.error("An Unknown Exception occured for PR {}: {}.", pullRequestId, e.getMessage());
-                            return "Uknown Exception analyzing chunk";
-                        }
-
-                    })
-                    .filter(fb -> !fb.equals("Nothing significant issues found") && !fb.equals(CodeAnalyzer.NO_ISSUES))
-                    .distinct()
-                    .collect(Collectors.toList());
-            // Aggregate feedback
-            String feedback = feedbacks.isEmpty() ? "No significant issues detected" : String.join("; ", feedbacks);
+            final var diffContent = this.parsingService.filterAndExtractDiffLines(parseJSON);
+            log.info("diffcontent: {}", diffContent);
+            List<String> chunks = this.parsingService.splitDiffIntoChunks(diffContent, 1000);
+            log.info("chunks: {}", chunks);
+            String feedback = this.analyzer.analyzeCode(chunks);
+            
             writeFeedbackToFile(pullRequestId, feedback);
             log.info("The Actual Feedback");
             log.info(feedback);
             Review review = new Review();
             review.setReviewId(UUID.randomUUID().toString());
             review.setPullRequestId(pullRequestId);
-            review.setFilePath(this.extractFilePathFromDiff(diffContent));
+            review.setFilePath(filePath);
             review.setDiffContent(diffContent);
-            review.setFeedback(feedback);
+            review.setFeedback(this.analyzer.parseAiResponse(feedback));
             review.setCreatedAt(Instant.now().toString());
 
             return CompletableFuture.completedFuture(reviewRepository.save(review));
@@ -102,36 +75,6 @@ public class CodeAnalysisService {
         }
     }
 
-    private List<String> chunkItUp(final String diffContent) throws JsonProcessingException {
-        List<String> chunks = new ArrayList<>();
-        if (this.aiProviderProperties.getAiProvider().equals("chatgpt")) {
-            chunks.add(diffContent);
-            return chunks;
-            
-        }
-        for (int i = 0; i < diffContent.length(); i += CHUNK_SIZE) {
-            String chunk = diffContent.substring(i, Math.min(i + CHUNK_SIZE, diffContent.length()));
-            chunk = chunk.length() > CHUNK_SIZE ? chunk.substring(0, CHUNK_SIZE) : chunk;
-            String escapedChunk = objectMapper.writeValueAsString(chunk);
-            log.debug("json payload: {}", escapedChunk);
-            chunks.add(cleanChunk(escapedChunk));
-        }
-        if (chunks.size() > freeTierAPILimit) {
-            int overFlow = chunks.size() - freeTierAPILimit;
-            while (overFlow > 0) {
-                chunks.removeLast();
-                --overFlow;
-            }
-        }
-        return chunks;
-    }
-
-    private String extractFilePathFromDiff(String diffContent) {
-        Pattern pattern = Pattern.compile("^\\+\\+\\+ b/(.+)$", Pattern.MULTILINE);
-        Matcher matcher = pattern.matcher(diffContent);
-        return matcher.find() ? matcher.group(1) : "unknown";
-    }
-
     private CompletableFuture<Void> writeFeedbackToFile(String pullRequestId, String feedback) {
         return CompletableFuture.runAsync(() -> {
             try {
@@ -148,31 +91,4 @@ public class CodeAnalysisService {
         });
     }
 
-    // TODO - Eventually, chunk by file. Right now, I can't do that because I am on
-    // the free version.
-    private List<String> chunkByFile(String diffContent) {
-        List<String> fileChunks = new ArrayList<>();
-
-        String[] parts = diffContent.split("(?=^diff --git )", -1);
-        for (String part : parts) {
-            if (part.strip().isEmpty()) {
-                continue; // skip empty entries
-            }
-            fileChunks.add(part.strip());
-        }
-
-        return fileChunks;
-    }
-
-    private String cleanChunk(String chunk) {
-        return chunk.replaceAll("[\\p{Cntrl}&&[^\r\n\t]]", ""); // Remove illegal control characters
-    }
-
-    public String extractAddedLinesOnly(String diff) {
-        return Arrays.stream(diff.split("\n"))
-                .filter(line -> line.startsWith("+") && !line.startsWith("+++"))
-                .map(line -> line.substring(1)) // strip leading '+'
-                .collect(Collectors.joining("\n"));
-    }
-
 }
